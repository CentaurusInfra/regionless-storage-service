syntax = "proto3";
package proto; 

import "google/api/annotations.proto";
option go_package = "./";

message KeyValue {
    bytes key = 1;
    int64 create_revision = 2;
    int64 mod_revision = 3;
    int64 version = 4;
    bytes value = 5;
  }

message Event {
    enum EventType {
      PUT = 0;
      DELETE = 1;
    }
    EventType type = 1;
    KeyValue kv = 2;
    KeyValue prev_kv = 3;
}
  
service KeyValueService {
    rpc Range(RangeRequest) returns (RangeResponse) {
        option (google.api.http) = {
          post: "/range"
          body: "*"
      };
    }
  
    rpc Put(PutRequest) returns (PutResponse) {
        option (google.api.http) = {
          post: "/put"
          body: "*"
      };
    }
  
    rpc DeleteRange(DeleteRangeRequest) returns (DeleteRangeResponse) {
        option (google.api.http) = {
          post: "/deleterange"
          body: "*"
      };
    }

  }
  
  service WatchService {
    rpc Watch(stream WatchRequest) returns (stream WatchResponse) {
        option (google.api.http) = {
          post: "/watch"
          body: "*"
      };
    }
  }
  
  message RangeRequest {
    enum SortOrder {
      NONE = 0;
      ASCEND = 1;
      DESCEND = 2;
    }
    enum SortTarget {
      KEY = 0;
      VERSION = 1;
      CREATE = 2;
      MOD = 3;
      VALUE = 4;
    }

    bytes key = 1;
    bytes range_end = 2;
    int64 limit = 3;
    int64 revision = 4;
    SortOrder sort_order = 5;
    SortTarget sort_target = 6;
    bool serializable = 7;
    bool keys_only = 8;
    bool count_only = 9;
  }
  
  message RangeResponse {
    repeated KeyValue kvs = 1;
  }
  
  message PutRequest {
    bytes key = 1;
    bytes value = 2;
  }
  
  message PutResponse {
    KeyValue prev_kv = 1;
  }

  message DeleteRangeRequest {
    bytes key = 1;
    bytes range_end = 2;
  }
  
  message DeleteRangeResponse {
    int64 deleted = 1;
  }
  
  message WatchRequest {
    oneof request_union {
      WatchCreateRequest create_request = 1;
      WatchCancelRequest cancel_request = 2;
    }
  }
  
  message WatchCreateRequest {
    bytes key = 1;
    bytes range_end = 2;
    int64 start_revision = 3;
  }
  
  message WatchCancelRequest {
    int64 watch_id = 1;
  }
  
  
  message WatchResponse {
    int64 watch_id = 1;
    bool created = 2;
    bool canceled = 3;
    int64 compact_revision = 4;
    repeated Event events = 5;
  }
  